write.csv(marks, file = con)
write.csv(marks, file = con, header = TRUE)
write.csv(marks, file = con, col.names = T)
write.csv(marks, file = con, col.names = TRUE)
write.csv(marks, file = con, row.names=F)
write.csv(marks, file = con, row.names=FALSE)
write.table(marks, file = con, row.names=FALSE)
write.table(marks, file = con)
con <- file("~/Documents/r-file.txt")
write.table(marks, file = con)
write.table(marks, file = con, row.names = FALSE)
getwd()
search()
v <- c(1,2,3)
v
names(v) <- c("a", "b", "c")
v
v$a
v["a"]
ls()
rm(ls())
rm(c(ls()))
ls
ls()
rm(list = ls())
ls()
oneToTen <- 1:10
oneToTen
append(oneToTen, 0, after = 9)
oneToTen
zeroToTen = append(oneToTen, 0 after = 9)
zeroToTen = append(oneToTen, 0, after = 9)
zeroToTen
oneToTen
days = factor(c=("mon", "wed", "fri"),c=("mon","tue","wed","thu","fri","sat","sun"))
days = factor(c("mon", "wed", "fri"), c("mon","tue","wed","thu","fri","sat","sun"))
days
freshmen <- c(0.9,0.8,0.75,0.98)
sophomores <- c(0.8,0.65,0.5,0.76)
juniors <- c(1,0.9,0.99,0.98,0.87)
collegeRes <- stack(list(fresh = freshmen, soph = sophomores, jun = juniors))
collegeRes
aov()
lst <- list()
lst$a = 1
lst$b = 2
lst$d = 4
lst
lst[[3]]
lst[[5]]
lst[c(a,b)]
lst[c("a","b")]
names(lst)
lst
lst[names(lst)] <- c(1,2,3)
lst
names(lst[[3]])
lst$d <- NULL
lst
lst$c <- 3
lst
sapply(lst,is.null)
sapply(lst,is.numeric)
lst <- list("a", NULL, "b")
lst
lst[sapply(lst,is.null)] <- NULL
lst
lst[is.null]
lst[is.null(lst)]
is.null(lst)
lst
is.null(unlist(lst))
lapply(lst,is.null)
sapply(lst,is.null)
unlist(lapply(lst,is.null))
oneToTen
oneMat <- matrix(oneToTen, 2, 5)
oneMat
oneMat <- matrix(0,2,5)
oneMat
oneMat <- matrix(oneToTen, 2, 5, byrow = TRUE)
oneMat
dim(oneToTen) <- c(2,5)
oneToTen
dim(oneToTen) <- c(1,1)
dim(oneToTen) <- c(1,)
dim(oneToTen) <- c(1, )
t(oneToTen)
t(oneToTen)
t(oneToTen)
oneToTen <- t(oneToTen)
oneToTen
t(oneToTen)
solve(oneToTen)
squareMat <- matrix(1:4, 2,2)
squareMat
t(squareMat)
solve(squareMat)
diag(squareMat)
squareMat
rownames(squareMat) <- c("oneToTwo", "threeToFour")
colnames(squareMat) <- c("oddNum", "evenNum")
squareMat
rownames(squareMat) <- c("oddNum", "evenNum")
colnames(squareMat) <- c("oneToTwo", "threeToFour")
squareMat
squareMat$oneToTwo
squareMat["oneToTwo"]
squareMat["oneToTwo", "oddNum"]
squareMat["oddNum","oneToTwo"]
squareMat[c(1,2), ]
squareMat[c(1,2)]
squareMat[c(1,2,4)]
squareMat[]
squareMat[1,]
squareMat[1,,drop=TRUE]
squareMat[1,,drop=FALSE]
col1 <- 1:3
col2 <- c("hello", "there", "kitty")
col3 <- c(TRUE,FALSE,FALSE)
allCol <- list(col1,col2,col3)
allCol
colFrame <- data.frame(col1,col2,col3)
colFrame
colFrame <- as.data.frame(allCol)
colFrame
colFrame <- as.data.frame(allCol, col.names = c("a","b","c"))
colFrame
colnames(colFrame) <- c("a","b","c")
colFrame
data1 <- data.frame(p1 = 1, p2 = "a", p3 = FALSE)
data2 <- data.frame(p1 = 2, p2 = "b", p3 = FALSE)
data3 <- data.frame(p1 = 3, p2 = "c", p3 = TRUE)
data4 <- data.frame(p1 = 4, p2 = "d", p3 = FALSE)
data5 <- data.frame(p1 = 5, p2 = "e", p3 = TRUE)
dataList <- list(data1, data2, data3, data4, data5)
dataList
dataList[[2]]
rbind(dataList[[1]], dataList[[2]])
rbind(dataList[[1]], dataList[[3]])
do.call(rbind,dataList)
dataFrame <- do.call(rbind, dataList)
dataFrame
allFrame <- Map(as.data.frame, allCol)
allFrame
allFrame[[2]]
dataframe <- do.call(rbind, allFrame)
dataframe <- do.call(rbind, Map(as.data.frame, allCol))
test <- data.frame("name"=character(10), "age"=integer(10))
test
test <- rbind(test,data.frame("name"="kaymas", "age"=20))
test
test[[2]]
test[c(1,2)]
test[,2]
test[,c(1,2)]
test[[2]]
test[2]
test <- data.frame("name" = character(10), "age" = factor(10,levels=c(19,20,21)))
test
View(test)
test[,2] <- c(19,20,21)
test[1:3,2] <- c(19,20,21)
test
test[,is.na()] <- NULL
test[,is.na(test)] <- NULL
subset(test)
subset(test, select = age)
subset(test, select = (!is.na(age)))
subset(test, subset = (!is.na(age)))
colFrame
colnames(colFrame) <- c("S.No.","Sentence","T/F")
colFrame
colFrame$S.No.
collegeRes
dataFrame
test
temp <- na.omit(test)
temp
test <- temp
temp
subset(temp)
subset(temp, subset = age)
subset(temp, select = age)
subset(temp, select = -age)
subset(temp, select = c(-name,-age))
test <- c(TRUE, FALSE, TRUE, FALSE, TRUE, TRUE)
test
sum(test)
temp[1,]
v <- c(40,2,45,65,98)
f <- factor(c("A","B","C","D","E"))
v
f
groups <- split(v,f)
groups
f <- factor(c("A","B","B","C","A"))
group <- split(v,f)
group
group$A
data.frame(x,f)
data.frame(v,f)
unstack(data.frame(v,f))
unstack(x <- edit(data.frame(v,f)))
sapply(group$A, sum)
sapply(group$A, square)
sapply(group, sum)
lapply(group, sum)
sapply(group, length)
mode(sapply(group, length))
apply(group, 1, sum)
apply(group, 1, sum)
apply(group, 1, mean)
group
apply(groups, 1, sum)
dim(groups)
as.data.frame(groups)
groups
group
groups <- unstack(x <- edit(data.frame(v,f)))
groups
dim(groups)
mode(groups)
apply(groups, 1, sum)
apply(groups, sum)
apply(groups,sum)
apply(groups,2,sum)
data.frame(v,f)
sapply(data.frame(v,f),sum)
data.frame(v,f)$f = NULL
data.frame(v,f)[,"f"] = NULL
data.frame(v,f)[,"f"]
data.frame(v,f)$f
data.frame(v,f)$f <- NULL
data.frame(v,f)$f <- c(1,2,3,4,5)
sapply(data.frame(v,f), mode)
sapply(data.frame(v,f), class)
tapply(v,f,sum)
v
f
data.frame(v,v)
by(data.frame(v,v), x = factor(c("a","b","b","c","a")), print)
by(data.frame(v,v), x = factor(c("a","b","b","c","a")), cat)
by(data.frame(v,v), x = factor(c("a","b","b","c","a")), summart)
by(data.frame(v,v), x = factor(c("a","b","b","c","a")), summary)
by(data.frame(v,f), f, summary)
by(data.frame(v,f), f, print)
length("hello")
nchar("hello")
nchar(c("Hello","there"))
paste("hello","there","how","are")
paste("hello","there","how","are", sep = "-")
nchar(paste("hello","there","how","are", sep = "-"))
names = c("harry","jon","david")
paste("hello",names,", how are you?")
paste("hello",names,", how are you?",collapse = ";")
paste("hello",names,", how are you?",collapse = ", and")
paste("hello",names,", how are you?",collapse = ", and ")
substr("hello samyak", 7,10)
substr("hello samyak", 7,9)
names
substr(names,nchar(names) - 1, nchar(names))
substr(names,nchar(names), nchar(names))
paths <- c("/Doc/pro/git","Doc/cs/files","Down/media")
strsplit(paths,"/")
as.data.frame(strsplit(paths,"/"))
test <- "hello there, how are you doing Samyak? By the way Samyak your friend Dhruv was asking about you."
sub("Samyak","Sanyam",test)
gsub("Samyak", "Sanyam", test)
test
date()
Sys.Date()
mode(date())
mode(Sys.Date())
class(date())
class(Sys.Date())
as.Date("02/12/2018", format = "%d/%m/%Y")
as.character(Sys.Date(), format = "%d/%m/%y")
as.Date("02/12/2018", format = "%d %B %Y")
as.character(Sys.Date(), format = "%d %B %Y")
ISOdate(2017,02,25)
as.date(ISOdate(2017,02,25))
as.Date(ISOdate(2017,02,25))
as.character(as.Date(ISOdate(2017,02,25)), format = "%d %B %Y")
prev <- as.Date(ISOdate(2017,02,25))
prev
cur <- Sys.Date()
cur
as.integer(cur)
as.integer(prev)
julian(cur)
test <- as.POSIXlt(Sys.Date())
test
test$mday
as.list(test)
test
test$mday
test$mon
test$wday
test$yday
test$yeat
test$year
test$year + 1900
dbdriver()
dbDriver
library(tidyverse)
install.packages(c("httr", "jsonlite", "tidyverse"))
user <- 'kaymas'
url_git <- 'https://api.github.com/'
library(tidyverse)
library(httr)
library(jsonlite)
install.packages("httr")
library(httr)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
summary(cars)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
clear
getwd()
ls
ls()
knit2html(untitled2)
library(knitr)
rm(list = ls())
getwd()
mergeSort <- function(vec){
mergeTwo <- function(left,right){
res <- c()
while(length(left) > 0 && length(right) > 0){
if(left[1] <= right[1]){
res <- c(res,left[1])
left <- left[-1]
}else{
res <- c(res,right[1])
right[-1]
}
}
if(length(left) > 0) res <- c(res,left)
if(length(right) > 0) res <- c(res,right)
return (res)
}
n <- length(vec)
if(n <= 1) return (vec)
else{
middle <- length(vec) / 2
left <- vec[1:floor(middle)]
right <- vec[floor(middle + 1):n]
left <- mergeSort(left)
right <- mergeSort(right)
if(left[length(left)] <= right[1]){
return (c(left,right))
}else{
return (mergeTwo(left,right))
}
}
}
mergeSort(c(1,2,2,7,1,2,9,4))
mergeSort <- function(vec){
mergeTwo <- function(left,right){
res <- c()
while(length(left) > 0 && length(right) > 0){
if(left[1] <= right[1]){
res <- c(res,left[1])
left <- left[-1]
}else{
res <- c(res,right[1])
right <- right[-1]
}
}
if(length(left) > 0) res <- c(res,left)
if(length(right) > 0) res <- c(res,right)
return (res)
}
n <- length(vec)
if(n <= 1) return (vec)
else{
middle <- length(vec) / 2
left <- vec[1:floor(middle)]
right <- vec[floor(middle + 1):n]
left <- mergeSort(left)
right <- mergeSort(right)
if(left[length(left)] <= right[1]){
return (c(left,right))
}else{
return (mergeTwo(left,right))
}
}
}
mergeSort(c(1,2,2,7,1,2,9,4))
mergeSort(c(1,2,2,7,1,2,9,4))
mergeSort(c(9,8,6,2,1,-2))
mergeSort(c(12,-22,13,2,-33,2))
median(c(1,2,2,3))
median(c(1,2,2,3,4,4,1,2,4))
median(c(1,2,2,3,4,4,1,1))
median(c(1,2,2,3,4,4,1,1,1))
median(c(1,2,2,3,4,4,1,1,1,1))
median(c(1,2,2,3,4,4,1,1,1,1,4))
quickSort <- function(vec){
if(length(vec) > 1){
pivot <- median(vec)
return (c(quickSort(vec[vec < pivot]), vec[vec == pivot], quickSort(vec[vec > pivot])))
}else{
return vec
quickSort <- function(vec){
if(length(vec) > 1){
pivot <- median(vec)
return (c(quickSort(vec[vec < pivot]), vec[vec == pivot], quickSort(vec[vec > pivot])))
}else{
return (vec)
}
}
quickSort(c(12,-22,13,2,-33,2))
quickSort(c(12,-22,13,2,-33,2))
quickSort(c(9,8,2,1,0,-2,12))
seq(from = 10, to = 10000, by = 500)
seq(from = 0, to = 10000, by = 500)
length(seq(from = 0, to = 10000, by = 500))
replicator <- function(func){
ele <- seq(from = 0, to = 10000, by = 500)
ele <- ele[-1]
timeElapsed <- c()
for(n in ele){
#timeElapsed <- c(timeElapsed, system.time(replicate(10, func(sample(x = 1:100, size = n, replace = TRUE))))[3] / 10)
timeElapsed <- c(timeElapsed,n)
}
return (data.frame(ele,timeElapsed))
}
replicator(mean)
plot(replicator(mean))
replicator <- function(func){
ele <- seq(from = 0, to = 10000, by = 500)
ele <- ele[-1]
timeElapsed <- c()
for(n in ele){
#timeElapsed <- c(timeElapsed, system.time(replicate(10, func(sample(x = 1:100, size = n, replace = TRUE))))[3] / 10)
timeElapsed <- c(timeElapsed,n)
}
return (data.frame(timeElapsed,ele))
}
plot(replicator(mean))
install.packages("ggplot2")
library("ggplot2", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
s <-
"A       B        C       G       Xax
0.451   0.333   0.034   0.173   0.22
0.491   0.270   0.033   0.207   0.34
0.389   0.249   0.084   0.271   0.54
0.425   0.819   0.077   0.281   0.34
0.457   0.429   0.053   0.386   0.53
0.436   0.524   0.049   0.249   0.12
0.423   0.270   0.093   0.279   0.61
0.463   0.315   0.019   0.204   0.23
"
s
d <- read.delim(textConnection(s), sep="")
d
d <- melt(d, id.vars="Xax")
library(reshape2)
d <- melt(d, id.vars="Xax")
d
ggplot(d, aes(Xax,value, col=variable)) +
geom_point() +
stat_smooth()
x = data.frame(
id   = c(1, 1, 2, 2),
blue = c(1, 0, 1, 0),
red  = c(0, 1, 0, 1)
)
x
melt(data = x, id.vars = "id", measure.vars = c("blue", "red"))
install.packages("ggpmisc")
d
x
y <- x[c("id","red","blue")]
y
t <- seq(0, 100, 1)
N0 <- 10
param <- list(k = 0.05)
fn <- function(t, N, param) with(param, list(-1 * k * N))
out <- ode(N0, t, fn, param)
t <- seq(0, 100, 1)
N0 <- 10
param <- list(k = 0.05)
fn <- function(t, N, param) with(param, list(-1 * k * N))
out <- ode(N0, t, fn, param)
library(deSolve)
t <- seq(0, 100, 1)
N0 <- 10
param <- list(k = 0.05)
fn <- function(t, N, param) with(param, list(-1 * k * N))
out <- ode(N0, t, fn, param)
a <- out[1]
a
plot(out)
t <- seq(0, 100, 1)
N0 <- 10
param <- list(k = 0.05)
fn <- function(t, N, param) with(param, list(-1 * k * N))
out <- ode(N0, t, fn, param)
a <- out[1]
class(out)
plot(out)
setwd("~/Documents/DUCS/class/s1/mcs101/assignments/sortTimes")
d
median(1:10)
median(c(2,3,-1,10))
(9 + 3 + 2) / 4
